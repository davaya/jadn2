       title: "JADN Metaschema"
     package: "http://oasis-open.org/openc2/jadn/v2.0/schema"
 description: "Syntax of a JSON Abstract Data Notation (JADN) package."
     license: "CC-BY-4.0"
       roots: ["Schema"]
      config: {"$FieldName": "^[$A-Za-z][_A-Za-z0-9]{0,63}$"}

Schema = Record                                         // Definition of a JADN package
   1 meta             Metadata optional                 // Information about this package
   2 types            Type unique [1..*]                // Types defined in this package

Metadata = Map                                          // Information about this package
   1 package          Namespace                         // Unique name/version of this package
   2 version          String{1..*} optional             // Incrementing version within package
   3 title            String{1..*} optional             // Title
   4 description      String{1..*} optional             // Description
   5 comment          String{1..*} optional             // Comment
   6 copyright        String{1..*} optional             // Copyright notice
   7 license          String{1..*} optional             // SPDX licenseId of this package
   8 namespaces       PrefixNs unique [0..*]            // Referenced packages
   9 roots            TypeName unique [0..*]            // Roots of the type tree(s) in this package
  10 config           Config optional                   // Configuration variables
  11 jadn_version     Namespace optional                // JADN Metaschema package

PrefixNs = Array                                        // Prefix corresponding to a namespace IRI
   1  NSID                              // prefix:: Namespace prefix string
   2  Namespace                         // namespace:: Namespace IRI

Config = Map{1..*}                                      // Config vars override JADN defaults
   1 $MaxBinary       Integer=[1, *] optional           // Package max octets, default = 255
   2 $MaxString       Integer=[1, *] optional           // Package max characters, default = 255
   3 $MaxElements     Integer=[1, *] optional           // Package max items/properties, default = 255
   4 $Sys             String{1..1} optional             // System character for TypeName, default = '.'
   5 $TypeName        String /regex optional            // Default = ^[A-Z][-.A-Za-z0-9]{0,63}$
   6 $FieldName       String /regex optional            // Default = ^[a-z][_A-Za-z0-9]{0,63}$
   7 $NSID            String /regex optional            // Default = ^([A-Za-z][A-Za-z0-9]{0,7})?$

Namespace = String /uri                                 // Unique name of a package

NSID = String{pattern="$NSID"}                          // Namespace prefix matching $NSID

TypeName = String{pattern="$TypeName"}                  // Name of a logical type

FieldName = String{pattern="$FieldName"}                // Name of a field in a structured type

TypeRef = String                                        // Reference to a type, matching ($NSID ':')? $TypeName

Type = Array
   1  TypeName                          // type_name::
   2  Enumerated(Enum[JADN-Type])       // core_type::
   3  TypeOptions(TagId[core_type])     // type_options::
   4  Description optional              // type_description::
   5  JADN-Type(TagId[core_type]) optional // fields::

JADN-Type = Choice
   1 Binary           Empty
   2 Boolean          Empty
   3 Integer          Empty
   4 Number           Empty
   5 String           Empty
   6 Enumerated       Items
   7 Choice           Fields
   8 Array            Fields
   9 ArrayOf          Empty
  10 Map              Fields
  11 MapOf            Empty
  12 Record           Fields

TypeOptions = Choice
   1 Binary           BinaryOpts
   2 Boolean          BooleanOpts
   3 Integer          IntegerOpts
   4 Number           NumberOpts
   5 String           StringOpts
   6 Enumerated       EnumeratedOpts
   7 Choice           ChoiceOpts
   8 Array            ArrayOpts
   9 ArrayOf          ArrayOfOpts
  10 Map              MapOpts
  11 MapOf            MapOfOpts
  12 Record           RecordOpts

Empty = Array{0..0}

Items = ArrayOf(Item)

Fields = ArrayOf(Field)

Item = Array
   1  FieldID                           // item_id::
   2  String optional                   // item_value::
   3  Description optional              // item_description::

Field = Array
   1  FieldID                           // field_id::
   2  FieldName                         // field_name::
   3  TypeRef                           // field_type::
   4  TypeOptions(TagId[field_type]) optional // field_options::
   5  Description optional              // field_description::

FieldID = Integer=[0, *]

FieldOptions = Map
  91 minOccurs        Integer=[0, *]
  93 maxOccurs        Integer=[-2, *]
  38 tagId            Integer
  75 key              Boolean
  76 link             Boolean
  78 not              Boolean

BinaryOpts = Map
  47 format           ArrayOf(Format) unique optional
 123 minLength        Integer optional
 125 maxLength        Integer optional

BooleanOpts = Map

IntegerOpts = Map
  47 format           ArrayOf(Format) unique optional
 121 minInclusive     Integer optional
 122 maxInclusive     Integer optional
 119 minExclusive     Integer optional
 120 maxExclusive     Integer optional

NumberOpts = Map
  47 format           ArrayOf(Format) unique optional
 121 minInclusive     Number optional
 122 maxInclusive     Number optional
 119 minExclusive     Number optional
 120 maxExclusive     Number optional

StringOpts = Map
  47 format           ArrayOf(Format) unique optional
 121 minInclusive     String optional
 122 maxInclusive     String optional
 119 minExclusive     String optional
 120 maxExclusive     String optional
  37 pattern          String /regex optional
 123 minLength        Integer=[0, *] optional
 125 maxLength        Integer=[0, *] optional

EnumeratedOpts = Map
  61 id               Boolean optional
  35 enum             TypeRef optional
  62 pointer          TypeRef optional

ChoiceOpts = Map
  61 id               Boolean optional
  67 combine          String{1..1} optional

ArrayOpts = Map
  47 format           ArrayOf(Format) unique optional
 123 minLength        Integer=[0, *] optional
 125 maxLength        Integer=[0, *] optional

ArrayOfOpts = Map
  42 vtype            TypeRef
 123 minLength        Integer=[0, *] optional
 125 maxLength        Integer=[0, *] optional
 113 unique           Boolean optional
 115 set              Boolean optional
  98 unordered        Boolean optional

MapOpts = Map
  61 id               Boolean optional
 123 minLength        Integer=[0, *] optional
 125 maxLength        Integer=[0, *] optional
 111 sequence         Boolean optional

MapOfOpts = Map
  43 ktype            TypeRef
  42 vtype            TypeRef
 123 minLength        Integer=[0, *] optional
 125 maxLength        Integer=[0, *] optional
 111 sequence         Boolean optional

RecordOpts = Map
 123 minLength        Integer=[0, *] optional
 125 maxLength        Integer=[0, *] optional
 111 sequence         Boolean optional

Format = String{pattern="^/[a-zA-Z0-9]{1,16}+$"}

Description = String
